#!/usr/bin/env python3
"""
Instalador Autom√°tico do YouTube MP3 Downloader
Verifica requisitos, instala depend√™ncias e cria o execut√°vel
Compat√≠vel com Windows e macOS
"""

import os
import sys
import platform
import subprocess
import urllib.request
import json
from pathlib import Path

class YouTubeDownloaderInstaller:
    def __init__(self):
        self.os_name = platform.system()
        self.is_windows = self.os_name == "Windows"
        self.is_macos = self.os_name == "Darwin"
        self.is_linux = self.os_name == "Linux"
        
    def print_header(self):
        print("=" * 70)
        print("üéµ YouTube MP3 Downloader - Instalador Autom√°tico")
        print(f"Sistema detectado: {self.os_name}")
        print("=" * 70)
        print()

    def check_python_version(self):
        """Verifica se a vers√£o do Python √© compat√≠vel"""
        print("üêç Verificando Python...")
        
        version = sys.version_info
        print(f"   Vers√£o encontrada: {version.major}.{version.minor}.{version.micro}")
        
        if version.major < 3:
            print("   ‚ùå Python 2 n√£o √© suportado. Por favor, instale Python 3.7+")
            return False
        
        if version.major == 3 and version.minor < 7:
            print("   ‚ö†Ô∏è  Vers√£o antiga detectada. Recomendamos Python 3.9+")
            response = input("   Deseja continuar mesmo assim? (y/N): ")
            if response.lower() not in ['y', 'yes', 's', 'sim']:
                return False
        
        print("   ‚úÖ Python OK!")
        return True

    def check_internet_connection(self):
        """Verifica conex√£o com a internet"""
        print("\nüåê Verificando conex√£o com a internet...")
        
        try:
            urllib.request.urlopen('https://www.google.com', timeout=5)
            print("   ‚úÖ Conex√£o OK!")
            return True
        except:
            print("   ‚ùå Sem conex√£o com a internet")
            print("   Necess√°rio para baixar depend√™ncias")
            return False

    def update_pip(self):
        """Atualiza o pip"""
        print("\nüì¶ Atualizando pip...")
        
        try:
            subprocess.run([
                sys.executable, "-m", "pip", "install", "--upgrade", "pip"
            ], check=True, capture_output=True)
            print("   ‚úÖ pip atualizado!")
            return True
        except subprocess.CalledProcessError:
            print("   ‚ö†Ô∏è  Falha ao atualizar pip, continuando...")
            return True

    def install_dependencies(self):
        """Instala as depend√™ncias Python necess√°rias"""
        print("\nüìö Instalando depend√™ncias Python...")
        
        dependencies = [
            ("pyinstaller", "Cria√ß√£o de execut√°veis"),
            ("yt-dlp", "Download de v√≠deos do YouTube")
        ]
        
        for package, description in dependencies:
            print(f"   Instalando {package} ({description})...")
            try:
                subprocess.run([
                    sys.executable, "-m", "pip", "install", package
                ], check=True, capture_output=True)
                print(f"   ‚úÖ {package} instalado!")
            except subprocess.CalledProcessError as e:
                print(f"   ‚ùå Falha ao instalar {package}: {e}")
                return False
        
        return True

    def check_ffmpeg(self):
        """Verifica se o FFmpeg est√° instalado"""
        print("\nüé¨ Verificando FFmpeg...")
        
        try:
            result = subprocess.run([
                "ffmpeg", "-version"
            ], check=True, capture_output=True, text=True)
            
            version_line = result.stdout.split('\n')[0]
            print(f"   ‚úÖ {version_line}")
            return True
            
        except (subprocess.CalledProcessError, FileNotFoundError):
            print("   ‚ùå FFmpeg n√£o encontrado!")
            self.show_ffmpeg_instructions()
            return False

    def show_ffmpeg_instructions(self):
        """Mostra instru√ß√µes para instalar FFmpeg"""
        print("\nüìã Instru√ß√µes para instalar FFmpeg:")
        
        if self.is_windows:
            print("   Windows:")
            print("   1. Via Chocolatey: choco install ffmpeg -y")
            print("   2. Via Scoop: scoop install ffmpeg")
            print("   3. Download manual: https://ffmpeg.org/download.html")
            print("      - Baixe, extraia e adicione ao PATH")
            
        elif self.is_macos:
            print("   macOS:")
            print("   1. Via Homebrew: brew install ffmpeg")
            print("   2. Via MacPorts: sudo port install ffmpeg")
            print("   3. Se n√£o tem Homebrew: https://brew.sh/")
            
        elif self.is_linux:
            print("   Linux:")
            print("   1. Ubuntu/Debian: sudo apt install ffmpeg")
            print("   2. CentOS/RHEL: sudo yum install ffmpeg")
            print("   3. Arch: sudo pacman -S ffmpeg")

    def get_latest_ytdlp_version(self):
        """Obt√©m a vers√£o mais recente do yt-dlp"""
        try:
            with urllib.request.urlopen('https://api.github.com/repos/yt-dlp/yt-dlp/releases/latest') as response:
                data = json.loads(response.read().decode())
                return data['tag_name']
        except:
            return "unknown"

    def create_executable(self):
        """Cria o execut√°vel"""
        print("\nüèóÔ∏è  Criando execut√°vel...")
        
        if not os.path.exists("youtube_mp3_downloader_gui.py"):
            print("   ‚ùå Arquivo 'youtube_mp3_downloader_gui.py' n√£o encontrado!")
            print("   Certifique-se de que est√° na pasta correta.")
            return False
        
        cmd = [
            sys.executable, "-m", "PyInstaller",
            "--onefile",
            "--windowed",
            "--name", "YouTube MP3 Downloader",
            "--clean"
        ]
        
        # Op√ß√µes espec√≠ficas por plataforma
        if self.is_macos:
            cmd.extend([
                "--osx-bundle-identifier", "com.youtubedownloader.app"
            ])
        
        cmd.append("youtube_mp3_downloader_gui.py")
        
        try:
            print("   Executando PyInstaller...")
            subprocess.run(cmd, check=True)
            print("   ‚úÖ Execut√°vel criado!")
            return True
        except subprocess.CalledProcessError as e:
            print(f"   ‚ùå Falha ao criar execut√°vel: {e}")
            return False

    def verify_executable(self):
        """Verifica se o execut√°vel foi criado corretamente"""
        print("\nüîç Verificando execut√°vel...")
        
        if self.is_windows:
            exe_path = Path("dist") / "YouTube MP3 Downloader.exe"
        else:
            exe_path = Path("dist") / "YouTube MP3 Downloader"
        
        if exe_path.exists():
            size_mb = exe_path.stat().st_size / (1024 * 1024)
            print(f"   ‚úÖ Execut√°vel encontrado!")
            print(f"   üìÅ Local: {exe_path}")
            print(f"   üìä Tamanho: {size_mb:.1f} MB")
            
            # Configurar permiss√µes no macOS/Linux
            if not self.is_windows:
                os.chmod(exe_path, 0o755)
                print("   üîê Permiss√µes configuradas")
            
            return True
        else:
            print("   ‚ùå Execut√°vel n√£o encontrado!")
            return False

    def show_usage_instructions(self):
        """Mostra instru√ß√µes de uso"""
        print("\nüéâ Instala√ß√£o conclu√≠da com sucesso!")
        print("\nüìñ Como usar:")
        
        if self.is_windows:
            print("   ‚Ä¢ Navegue at√© a pasta 'dist'")
            print("   ‚Ä¢ Clique duas vezes em 'YouTube MP3 Downloader.exe'")
            print("   ‚Ä¢ Ou mova o arquivo para onde desejar")
            
        elif self.is_macos:
            print("   ‚Ä¢ Abra o Finder e navegue at√© a pasta 'dist'")
            print("   ‚Ä¢ Clique duas vezes em 'YouTube MP3 Downloader'")
            print("   ‚Ä¢ Ou via Terminal: ./dist/YouTube\\ MP3\\ Downloader")
            
        print("\nüí° Dicas:")
        print("   ‚Ä¢ Cole URLs do YouTube na interface")
        print("   ‚Ä¢ Suporta v√≠deos individuais e playlists")
        print("   ‚Ä¢ Escolha a qualidade de √°udio desejada")
        print("   ‚Ä¢ Os arquivos s√£o salvos na pasta Downloads por padr√£o")

    def show_troubleshooting(self):
        """Mostra dicas de solu√ß√£o de problemas"""
        print("\nüîß Solu√ß√£o de problemas:")
        print("   ‚Ä¢ Se downloads falham: verifique a URL e conex√£o")
        print("   ‚Ä¢ Para atualizar: pip install --upgrade yt-dlp")
        print("   ‚Ä¢ Logs detalhados aparecem na interface do app")

    def run_installation(self):
        """Executa o processo completo de instala√ß√£o"""
        self.print_header()
        
        # Verifica√ß√µes iniciais
        if not self.check_python_version():
            print("\n‚ùå Instala√ß√£o cancelada - Python incompat√≠vel")
            return False
        
        if not self.check_internet_connection():
            print("\n‚ùå Instala√ß√£o cancelada - Sem internet")
            return False
        
        # Instala√ß√£o
        if not self.update_pip():
            print("\n‚ùå Falha ao atualizar pip")
            return False
        
        if not self.install_dependencies():
            print("\n‚ùå Falha ao instalar depend√™ncias")
            return False
        
        # Verificar FFmpeg
        ffmpeg_ok = self.check_ffmpeg()
        if not ffmpeg_ok:
            print("\n‚ö†Ô∏è  FFmpeg n√£o encontrado!")
            response = input("   Deseja continuar mesmo assim? (y/N): ")
            if response.lower() not in ['y', 'yes', 's', 'sim']:
                print("\n‚ùå Instala√ß√£o cancelada")
                return False
        
        # Criar execut√°vel
        if not self.create_executable():
            print("\n‚ùå Falha ao criar execut√°vel")
            return False
        
        if not self.verify_executable():
            print("\n‚ùå Verifica√ß√£o do execut√°vel falhou")
            return False
        
        # Mostrar instru√ß√µes finais
        self.show_usage_instructions()
        
        if not ffmpeg_ok:
            print("\n‚ö†Ô∏è  IMPORTANTE: Instale o FFmpeg para melhor funcionamento!")
            self.show_ffmpeg_instructions()
        
        self.show_troubleshooting()
        
        print("\n‚ú® Instala√ß√£o completa!")
        return True

def main():
    installer = YouTubeDownloaderInstaller()
    
    try:
        success = installer.run_installation()
        if success:
            input("\nPressione Enter para sair...")
        else:
            input("\nInstala√ß√£o falhou. Pressione Enter para sair...")
            sys.exit(1)
    except KeyboardInterrupt:
        print("\n\n‚ùå Instala√ß√£o cancelada pelo usu√°rio")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Erro inesperado: {e}")
        input("Pressione Enter para sair...")
        sys.exit(1)

if __name__ == "__main__":
    main()